#include <iostream>

#include "A.h"
#include "B.h"

int main()
{	
	A a;
	B b;

	system("pause");
	return 0;
}

/*
================================================================================
==>前置声明
--------------------------------------------------------------------------------
问题场景：A、B类为强耦合关系 ==> 类A引用类B的对象，类B引用类A的对象（相互包含）。 
编译结果：编译失败，（VS2019 Error）包含自身；包含文件太多，深度=1024
产生原因：预编译A先要编译B，预编译B先要编译A，陷入死循环。
解决方法：使用 前置声明 代替 #include。

关于前置声明：
	1.在使用前置声明的类的定义中，只能使用被声明方的指针或引用，不能使用对象。（对象大小未知，分配内存失败）。
	2.只有前置声明的类的定义中，不能使用被声明方的具体成员。
	3.前置声明可节省编译时间，被声明一方修改后，声明一方无需再次编译。
使用建议：
	1.仅使用类的指针而不访问具体成员时，前置声明即可。
	2.在实现文件（.cpp）中包含头文件，而非头文件（.h）中包含。
================================================================================
*/